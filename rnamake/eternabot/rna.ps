%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Sat Nov 23 15:27:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
ACUUUUCUCUAUCACUGAUAGUUUUAAAGGCCAAAAGGCCAAAAUAAAAUAAGGCUAGUCCGUUAUCAAGAAAAAAUUCUGAGCUGCCCCCAAAGGGGGCAGCAUUUUU\
) def
/coor [
[202.56552124 215.81315613]
[203.21725464 201.37193298]
[207.93692017 187.69126892]
[195.80166626 178.87449646]
[183.66641235 170.05770874]
[171.53115845 161.24093628]
[159.39590454 152.42416382]
[147.26065063 143.60737610]
[132.63540649 146.18380737]
[120.20293427 137.41520691]
[117.59970093 122.05744171]
[105.46444702 113.24066162]
[91.58059692 111.58831787]
[85.71877289 98.89459229]
[73.58351898 90.07781219]
[57.87107086 88.22588348]
[52.12236404 74.48537445]
[39.98711014 65.66859436]
[27.85185432 56.85181427]
[15.59193802 48.20921707]
[3.20985913 39.74256897]
[-9.17221928 31.27592278]
[-21.55429840 22.80927467]
[-33.93637466 14.34262562]
[-46.31845474 5.87597752]
[-58.70053482 -2.59067082]
[-80.66679382 4.14805937]
[-100.51569366 -6.91314268]
[-106.21202087 -28.64818764]
[-120.02887726 -34.48723984]
[-133.84573364 -40.32629013]
[-147.66258240 -46.16534042]
[-163.86064148 -43.60512161]
[-173.96516418 -56.52142334]
[-167.58146667 -71.62706757]
[-151.27655029 -73.38265991]
[-141.82353210 -59.98219681]
[-128.00668335 -54.14314651]
[-114.18981934 -48.30409241]
[-100.37297058 -42.46504211]
[-94.65145111 -48.07586288]
[-87.57131195 -51.88721085]
[-79.68391418 -53.58506775]
[-71.60826874 -53.02067566]
[-63.98251724 -50.22342682]
[-57.41345978 -45.39976501]
[-52.42827988 -38.91799164]
[-49.43226624 -31.28019905]
[-48.67588043 -23.08337402]
[-50.23388672 -14.97274876]
[-37.85180664 -6.50610113]
[-25.46972847 1.96054733]
[-13.08764935 10.42719555]
[-0.70557106 18.89384460]
[11.67650700 27.36049271]
[24.05858612 35.82714081]
[31.46655846 37.02248001]
[36.66863251 44.71656036]
[48.80388641 53.53333664]
[60.93914413 62.35011673]
[75.78359222 63.57141113]
[82.40029907 77.94255829]
[94.53555298 86.75933838]
[108.41940308 88.41168213]
[114.28122711 101.10540771]
[126.41648102 109.92218781]
[141.82702637 107.65219879]
[154.00830078 116.76653290]
[156.07742310 131.47212219]
[168.21267700 140.28889465]
[180.34793091 149.10568237]
[192.48318481 157.92245483]
[204.61843872 166.73924255]
[216.75369263 175.55601501]
[229.44659424 166.23297119]
[244.37345886 161.27218628]
[260.08319092 161.14338684]
[275.05249023 165.84716797]
[287.83346558 174.91609192]
[297.19378662 187.46113586]
[302.23535156 202.25880432]
[302.48062134 217.87046814]
[297.91769409 232.78222656]
[310.29977417 241.24888611]
[322.68185425 249.71553040]
[335.06393433 258.18218994]
[347.44601440 266.64883423]
[359.82809448 275.11547852]
[372.21017456 283.58212280]
[384.59225464 292.04876709]
[396.97433472 300.51541138]
[413.46191406 304.46463013]
[414.23123169 321.40109253]
[398.16961670 326.82885742]
[388.50769043 312.89749146]
[376.12561035 304.43084717]
[363.74353027 295.96420288]
[351.36145020 287.49755859]
[338.97937012 279.03091431]
[326.59729004 270.56423950]
[314.21520996 262.09759521]
[301.83312988 253.63095093]
[289.45104980 245.16430664]
[278.31838989 254.18402100]
[265.07244873 259.68817139]
[250.79417419 261.21780396]
[236.65144348 258.63873291]
[223.80366516 252.15312195]
[213.30668640 242.28387451]
] def
/pairs [
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[11 66]
[12 65]
[14 63]
[15 62]
[17 60]
[18 59]
[19 58]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[29 40]
[30 39]
[31 38]
[32 37]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
