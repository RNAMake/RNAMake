import numpy as np


# line for formatting pdb information
PDBLINE_GE100K = ('%-6s%5d %-4s%1s%-4s%1s%4d%1s   '
                  '%8.3f%8.3f%8.3f%6.2f%6.2f      '
                  '%4s%2s\n')


def point_to_str(p):
    """
    converts numpy array or list into string

    :param p: point to print
    :type  p: np.array

    :returns: string of each element seperated by a space
    :rtype: str

    :examples:

    .. code-block:: python

        >>> from rnamake import basic_io
        >>> p = np.array([0,1,2])
        >>> basic_io.point_to_str(p)
        '0.0 1.0 2.0 '

    """
    return " ".join([str(float(x)) for x in p])


def points_to_str(points):
    """
    converts a list of points into a string seperated by spaces

    :param points: list of np.array points
    :type points: list of np.array points

    :returns: stringifed version of points
    :rtype: str

    :examples:

    .. code-block:: python

        >>> from rnamake import basic_io
        >>> points = [np.array([1, 0, 1]), np.array([0, 0, 0])]
        >>> basic_io.points_to_str(points)
        '1.0 0.0 1.0 0.0 0.0 0.0 '

    """
    s = ""
    for p in points:
        s += point_to_str(p) + " "
    return s


def matrix_to_str(m):
    """
    converts numpy array that is multidimensional to a string, assumes that
    each column is length 3, this might be an issue later

    :param m: matrix to be convert to string
    :type m: 3x3 np.array

    :returns: stringifed matrix
    :rtype: str

    :examples:

    .. code-block:: python
        >>> from rnamake import basic_io
        >>> m = np.eye(3)
        >>> print m
        [[ 1.  0.  0.]
         [ 0.  1.  0.]
         [ 0.  0.  1.]]

        >>> basic_io.matrix_to_str(m)
        '1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 '

    """
    s = ""
    for i in range(len(m)):
        for j in range(3):
            s += str(float(m[i][j])) + " "

    return s


# TODO why is this here not in residue.py
def bead_to_str(bead):
    """
    converts a residue.Bead object into a str

    :param bead: a bead object to be converted into a str
    :type bead: residue.Bead

    :return: stringifed verision of the bead object
    :rtype: str

    :examples:

    .. code-block:: python
        >>> from rnamake import basic_io, residue
        >>> b = residue.Bead(np.array([1, 2, 3]), residue.BeadType.PHOS)
        >>> print b
        <Bead(btype='PHOSPHATE', center='1.0 2.0 3.0')>

        # the enum value of the residue.BeadType.PHOS is 0
        >>> basic_io.bead_to_str(b)
        '1.0 2.0 3.0,0'
    """

    return point_to_str(bead.center) + "," + str(bead.btype)


def beads_to_str(beads):
    """
    converts multiple residue.Bead objects into a string calls
    :func:`bead_to_str` for each bead which it seperates by a ';'

    :param beads: the multiple bead objects you wish to write to string
    :type beads: list of residue.Bead

    :return: stringifed verision of residue.Bead objects
    :rtype: str
    """

    s = ""
    for b in beads:
        s += bead_to_str(b) + ";"
    return s


def str_to_point(s):
    """
    converts str generated by :func:`point_to_str` back to a np.array

    :param s: string of np.array
    :type s: str

    :return: unstringifed verision of str back np.array
    :rtype: np.array
    """

    p = np.array([float(x) for x in s.split()])
    return p


def str_to_points(s):
    """
    converts str generated by :func:`points_to_str` back into a list of
    np.arrays

    :param s: stringifed verision of str list of np.arrays
    :type s: str

    :return: unstringifed list of np.arrays
    :rtype: list of np.arrays
    """

    floats = [float(x) for x in s.split()]
    points = []
    for i in range(0, len(floats), 3):
        p = np.array(floats[i:i+3])
        points.append(p)
    return points


def str_to_matrix(s):
    """
    converts str generated by :func:`matrix_to_str` back into a 3x3 np.array

    :param s: stringifed verision of 3x3 np.array
    :type s: str

    :return: unstringified 3x3 np.array
    :rtype: 3x3 np.array
    """

    m = np.array([float(x) for x in s.split()])
    rows = int(len(m)/3)
    m = m.reshape(rows,3)
    return m


def points_to_pdb_str(points):
    """
    generates a PDB formmated string with a series of points as individual
    atoms. Mostly used for debugging bead positions.

    :param points: list of points to be converted atoms in a PDB str
    :type points: list of np.arrays

    :return: PDB formmated str
    :rtype: str
    """

    count=1
    string = ""
    for p in points:
        string += "ATOM {:6d}  P   C   A   1 {:11.3f}{:8.3f}{:8.3f}  1.00 62.18           P\n".format(count,p[0],p[1],p[2])
        count += 1
    return string


def points_to_pdb(filename, points):
    """
    writes the results of :func:`points_to_pdb_str` to a file

    :param filename: name of pdb file you want to write to
    :param points: the points to be written as atom positions in pdb file

    :type filename: str
    :type points: list of np.arrays

    :return: None
    """

    f = open(filename,"w")
    f.write( points_to_pdb_str(points) )
    f.close()


def beads_to_pdb_str(beads):
    """
    formats the centers of residue.Bead objects to atom positions in a PDB
    formmated string.

    :param beads: beads you want to write to a PDB formmated str
    :type beads: lists of residue.Bead

    :return: PDB formatted str
    :rtype: str
    """

    string = points_to_pdb_str([b.center for b in beads])
    return string


def beads_to_pdb(filename, beads):
    """
    writes the reuslts of :func:`beads_to_pdb_str` to a file

    :param filename: name of pdb file you want to write to
    :param beads: beads you want to write to a PDB formmated str

    :type filename: str
    :type beads: list of residue.Bead

    :return:
    """

    f = open(filename,"w")
    f.write( beads_to_pdb_str(beads) )
    f.close()



